openapi: 3.0.0
info:
  title: Kommunali Backend API
  version: '1.0.0'
  description: API documentation for the Kommunali backend
servers:
  - url: http://localhost:4000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
              required:
                - email
                - password
                - firstName
                - lastName
      responses:
        '201':
          description: User profile created successfully
        '400':
          description: User profile already exists
        '500':
          description: Failed to create user profile

  /users/login:
    post:
      summary: User login
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
        '500':
          description: Failed to log in

  /users/profile:
    get:
      summary: Get user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
        '404':
          description: User not found
        '500':
          description: Failed to fetch user profile

    put:
      summary: Update user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '200':
          description: User profile updated successfully
        '404':
          description: User not found
        '500':
          description: Failed to update user profile

    delete:
      summary: Delete user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile deleted successfully
        '404':
          description: User not found
        '500':
          description: Failed to delete user profile
  /users/forgot-password:
    post:
      summary: Send password reset email
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent successfully
        '404':
          description: User not found
        '500':
          description: Failed to send password reset email
  /stores:

    post:
      summary: Create a new store
      tags:
        - Stores
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
                      minItems: 2
                      maxItems: 2
                address:
                  type: object
                  properties:
                    street:
                      type: string
                    houseNumber:
                      type: string
                    apartment:
                      type: string
                      required: false
                    city:
                      type: string
                    postalCode:
                      type: string
      responses:
        '201':
          description: Store created successfully
        '404':
          description: Owner not found
        '500':
          description: Failed to create store

    get:
      summary: Get all stores
      tags:
        - Stores
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of stores retrieved successfully
        '500':
          description: Failed to fetch stores

  /stores/{storeId}:
    get:
      summary: Get a store by ID
      tags:
        - Stores
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: The ID of the store to retrieve
      responses:
        '200':
          description: Store retrieved successfully
        '404':
          description: Store not found
        '500':
          description: Failed to fetch store

    put:
      summary: Update store details
      tags:
        - Stores
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: The ID of the store to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                location:
                  type: object
                  properties:
                    lat:
                      type: number
                    lng:
                      type: number
                address:
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    postalCode:
                      type: string
      responses:
        '200':
          description: Store updated successfully
        '404':
          description: Store not found
        '500':
          description: Failed to update store

    delete:
      summary: Delete a store
      tags:
        - Stores
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: The ID of the store to delete
      responses:
        '200':
          description: Store deleted successfully
        '404':
          description: Store not found
        '500':
          description: Failed to delete store
  /stores/{storeId}/products:
    post:
      summary: Add a new product
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                imageUrl:
                  type: string
                price:
                  type: number
                status:
                  type: string
                  enum: [available, reserved, hidden, sold]
                reservedFor:
                  type: string
                reservedExpiration:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Product created successfully
        '400':
          description: Invalid product data
        '500':
          description: Failed to add product

    get:
      summary: Get all products
      tags:
        - Products
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [available, reserved, hidden, sold]
          description: Filter products by status
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of products per page
      responses:
        '200':
          description: List of products retrieved successfully
        '500':
          description: Failed to fetch products

  /stores/{storeId}/products/{productId}:
    get:
      summary: Get a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          schema:
            type: string
          required: true
          description: The ID of the product to retrieve
      responses:
        '200':
          description: Product retrieved successfully
        '404':
          description: Product not found
        '500':
          description: Failed to fetch product

    put:
      summary: Update product details
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: string
          required: true
          description: The ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                imageUrl:
                  type: string
                price:
                  type: number
                status:
                  type: string
                  enum: [available, reserved, hidden, sold]
                reservedFor:
                  type: string
                reservedExpiration:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Product updated successfully
        '404':
          description: Product not found
        '500':
          description: Failed to update product

    delete:
      summary: Delete a product
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: string
          required: true
          description: The ID of the product to delete
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
        '500':
          description: Failed to delete product
